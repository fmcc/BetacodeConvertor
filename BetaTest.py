from BetacodeConvertor import BetacodeConvertor
import unittest

class DefaultValues(unittest.TestCase):
    convertor = BetacodeConvertor()
    pairs = ( ('*&A',('\u1FB9','')),
    ("*'A",('\u1FB8','')),
    ('*(A',('\u1F09','')),
    ('*(/A',('\u1F0D','')),
    ('*(=A',('\u1F0F','')),
    ('*(\\A',('\u1F0B','')),
    ('*)A',('\u1F08','')),
    ('*)/A',('\u1F0C','')),
    ('*)=A',('\u1F0E','')),
    ('*)\\A',('\u1F0A','')),
    ('*A',('\u0391','')),
    ('*/A',('\u0386','')),
    ('*\\A',('\u1FBA','')),
    ('*(A|',('\u1F89','')),
    ('*(/A|',('\u1F8D','')),
    ('*(=A|',('\u1F8F','')),
    ('*(\\A|',('\u1F8B','')),
    ('*)A|',('\u1F88','')),
    ('*)/A|',('\u1F8C','')),
    ('*)=A|',('\u1F8E','')),
    ('*)\\A|',('\u1F8A','')),
    ('*A|',('\u1FBC','')),
    ('*B',('\u0392','')),
    ('*C',('\u039E','')),
    ('*D',('\u0394','')),
    ('*(E',('\u1F19','')),
    ('*(/E',('\u1F1D','')),
    ('*(\\E',('\u1F1B','')),
    ('*)E',('\u1F18','')),
    ('*)/E',('\u1F1C','')),
    ('*)\\E',('\u1F1A','')),
    ('*E',('\u0395','')),
    ('*/E',('\u0388','')),
    ('*\\E',('\u1FC8','')),
    ('*F',('\u03A6','')),
    ('*G',('\u0393','')),
    ('*(H',('\u1F29','')),
    ('*(/H',('\u1F2D','')),
    ('*(=H',('\u1F2F','')),
    ('*(\\H',('\u1F2B','')),
    ('*)H',('\u1F28','')),
    ('*)/H',('\u1F2C','')),
    ('*)=H',('\u1F2E','')),
    ('*)\\H',('\u1F2A','')),
    ('*H',('\u0397','')),
    ('*/H',('\u0389','')),
    ('*\\H',('\u1FCA','')),
    ('*(H|',('\u1F99','')),
    ('*(/H|',('\u1F9D','')),
    ('*(=H|',('\u1F9F','')),
    ('*(\\H|',('\u1F9B','')),
    ('*)H|',('\u1F98','')),
    ('*)/H|',('\u1F9C','')),
    ('*)=H|',('\u1F9E','')),
    ('*)\\H|',('\u1F9A','')),
    ('*H|',('\u1FCC','')),
    ('*&I',('\u1FD9','')),
    ("*'I",('\u1FD8','')),
    ('*(I',('\u1F39','')),
    ('*(/I',('\u1F3D','')),
    ('*(=I',('\u1F3F','')),
    ('*(\\I',('\u1F3B','')),
    ('*)I',('\u1F38','')),
    ('*)/I',('\u1F3C','')),
    ('*)=I',('\u1F3E','')),
    ('*)\\I',('\u1F3A','')),
    ('*I',('\u0399','')),
    ('*/I',('\u038A','')),
    ('*\\I',('\u1FDA','')),
    ('*K',('\u039A','')),
    ('*L',('\u039B','')),
    ('*M',('\u039C','')),
    ('*N',('\u039D','')),
    ('*&O',('\u1FE9','')),
    ("*'O",('\u1FE8','')),
    ('*(O',('\u1F49','')),
    ('*(/O',('\u1F4D','')),
    ('*(\\O',('\u1F4B','')),
    ('*)O',('\u1F48','')),
    ('*)/O',('\u1F4C','')),
    ('*)\\O',('\u1F4A','')),
    ('*O',('\u039F','')),
    ('*/O',('\u038C','')),
    ('*\\O',('\u1FF8','')),
    ('*P',('\u03A0','')),
    ('*Q',('\u0398','')),
    ('*(R',('\u1FEC','')),
    ('*R',('\u03A1','')),
    ('*S',('\u03A3','')),
    ('*S3',('\u03F9','')),
    ('*T',('\u03A4','')),
    ('*(U',('\u1F59','')),
    ('*(/U',('\u1F5D','')),
    ('*(=U',('\u1F5F','')),
    ('*(\\U',('\u1F5B','')),
    ('*U',('\u03A5','')),
    ('*/U',('\u038E','')),
    ('*\\U',('\u1FEA','')),
    ('*V',('\u03DC','')),
    ('*(W',('\u1F69','')),
    ('*(/W',('\u1F6D','')),
    ('*(=W',('\u1F6F','')),
    ('*(\\W',('\u1F6B','')),
    ('*)W',('\u1F68','')),
    ('*)/W',('\u1F6C','')),
    ('*)=W',('\u1F6E','')),
    ('*)\\W',('\u1F6A','')),
    ('*W',('\u03A9','')),
    ('*/W',('\u038F','')),
    ('*\\W',('\u1FFA','')),
    ('*(W|',('\u1FA9','')),
    ('*(/W|',('\u1FAD','')),
    ('*(=W|',('\u1FAF','')),
    ('*(\\W|',('\u1FAB','')),
    ('*)W|',('\u1FA8','')),
    ('*)/W|',('\u1FAC','')),
    ('*)=W|',('\u1FAE','')),
    ('*)\\W|',('\u1FAA','')),
    ('*W|',('\u1FFC','')),
    ('*X',('\u03A7','')),
    ('*Y',('\u03A8','')),
    ('*Z',('\u0396','')),
    ('A&',('\u1FB1','')),
    ("A'",('\u1FB0','')),
    ('A(',('\u1F01','')),
    ('A(/',('\u1F05','')),
    ('A(=',('\u1F07','')),
    ('A(\\',('\u1F03','')),
    ('A)',('\u1F00','')),
    ('A)/',('\u1F04','')),
    ('A)=',('\u1F06','')),
    ('A)\\',('\u1F02','')),
    ('A',('\u03B1','')),
    ('A/',('\u03AC','')),
    ('A=',('\u1FB6','')),
    ('A\\',('\u1F70','')),
    ('A(|',('\u1F81','')),
    ('A(/|',('\u1F85','')),
    ('A(=|',('\u1F87','')),
    ('A(\\|',('\u1F83','')),
    ('A)|',('\u1F80','')),
    ('A)/|',('\u1F84','')),
    ('A)=|',('\u1F86','')),
    ('A)\\|',('\u1F82','')),
    ('A|',('\u1FB3','')),
    ('A/|',('\u1FB4','')),
    ('A=|',('\u1FB7','')),
    ('A\\|',('\u1FB2','')),
    ('B',('\u03B2','')),
    ('C',('\u03BE','')),
    ('D',('\u03B4','')),
    ('E(',('\u1F11','')),
    ('E(/',('\u1F15','')),
    ('E(\\',('\u1F13','')),
    ('E)',('\u1F10','')),
    ('E)/',('\u1F14','')),
    ('E)\\',('\u1F12','')),
    ('E',('\u03B5','')),
    ('E/',('\u03AD','')),
    ('E\\',('\u1F72','')),
    ('F',('\u03C6','')),
    ('G',('\u03B3','')),
    ('H(',('\u1F21','')),
    ('H(/',('\u1F25','')),
    ('H(=',('\u1F27','')),
    ('H(\\',('\u1F23','')),
    ('H)',('\u1F20','')),
    ('H)/',('\u1F24','')),
    ('H)=',('\u1F26','')),
    ('H)\\',('\u1F22','')),
    ('H',('\u03B7','')),
    ('H/',('\u03AE','')),
    ('H=',('\u1FC6','')),
    ('H\\',('\u1F74','')),
    ('H(|',('\u1F91','')),
    ('H(/|',('\u1F95','')),
    ('H(=|',('\u1F97','')),
    ('H(\\|',('\u1F93','')),
    ('H)|',('\u1F90','')),
    ('H)/|',('\u1F94','')),
    ('H)=|',('\u1F96','')),
    ('H)\\|',('\u1F92','')),
    ('H|',('\u1FC3','')),
    ('H/|',('\u1FC4','')),
    ('H=|',('\u1FC7','')),
    ('H\\|',('\u1FC2','')),
    ('I&',('\u1FD1','')),
    ("I'",('\u1FD0','')),
    ('I(',('\u1F31','')),
    ('I(/',('\u1F35','')),
    ('I(=',('\u1F37','')),
    ('I(\\',('\u1F33','')),
    ('I)',('\u1F30','')),
    ('I)/',('\u1F34','')),
    ('I)=',('\u1F36','')),
    ('I)\\',('\u1F32','')),
    ('I+/',('\u1FD3','')),
    ('I+=',('\u1FD7','')),
    ('I+\\',('\u1FD2','')),
    ('I',('\u03B9','')),
    ('I/',('\u03AF','')),
    ('I=',('\u1FD6','')),
    ('I\\',('\u1F76','')),
    ('K',('\u03BA','')),
    ('L',('\u03BB','')),
    ('M',('\u03BC','')),
    ('N',('\u03BD','')),
    ('O&',('\u1FE1','')),
    ("O'",('\u1FE0','')),
    ('O(',('\u1F41','')),
    ('O(/',('\u1F45','')),
    ('O(\\',('\u1F43','')),
    ('O)',('\u1F40','')),
    ('O)/',('\u1F44','')),
    ('O)\\',('\u1F42','')),
    ('O+/',('\u1FE3','')),
    ('O+=',('\u1FE7','')),
    ('O+\\',('\u1FE2','')),
    ('O',('\u03BF','')),
    ('O/',('\u03CC','')),
    ('O\\',('\u1F78','')),
    ('P',('\u03C0','')),
    ('Q',('\u03B8','')),
    ('R(',('\u1FE5','')),
    ('R)',('\u1FE4','')),
    ('R',('\u03C1','')),
    ('S',('\u03C3','')),
    ('S1',('\u03C3','')),
    ('S2',('\u03C2','')),
    ('J',('\u03C2','')),
    ('S3',('\u03F2','')),
    ('T',('\u03C4','')),
    ('U(',('\u1F51','')),
    ('U(/',('\u1F55','')),
    ('U(=',('\u1F57','')),
    ('U(\\',('\u1F53','')),
    ('U)',('\u1F50','')),
    ('U)/',('\u1F54','')),
    ('U)=',('\u1F56','')),
    ('U)\\',('\u1F52','')),
    ('U',('\u03C5','')),
    ('U/',('\u03CD','')),
    ('U=',('\u1FE6','')),
    ('U\\',('\u1F7A','')),
    ('V',('\u03DD','')),
    ('W(',('\u1F61','')),
    ('W(/',('\u1F65','')),
    ('W(=',('\u1F67','')),
    ('W(\\',('\u1F63','')),
    ('W)',('\u1F60','')),
    ('W)/',('\u1F64','')),
    ('W)=',('\u1F66','')),
    ('W)\\',('\u1F62','')),
    ('W',('\u03C9','')),
    ('W/',('\u03CE','')),
    ('W=',('\u1FF6','')),
    ('W\\',('\u1F7C','')),
    ('W(|',('\u1FA1','')),
    ('W(/|',('\u1FA5','')),
    ('W(=|',('\u1FA7','')),
    ('W(\\|',('\u1FA3','')),
    ('W)|',('\u1FA0','')),
    ('W)/|',('\u1FA4','')),
    ('W)=|',('\u1FA6','')),
    ('W)\\|',('\u1FA2','')),
    ('W|',('\u1FF3','')),
    ('W/|',('\u1FF4','')),
    ('W=|',('\u1FF7','')),
    ('W\\|',('\u1FF2','')),
    ('X',('\u03C7','')),
    ('Y',('\u03C8','')),
    ('Z',('\u03B6','')),
    ('*/(A',('\u1F0D','')),
    ('*=(A',('\u1F0F','')),
    ('*\\(A',('\u1F0B','')),
    ('*/)A',('\u1F0C','')),
    ('*=)A',('\u1F0E','')),
    ('*\\)A',('\u1F0A','')),
    ('*/(A|',('\u1F8D','')),
    ('*=(A|',('\u1F8F','')),
    ('*\\(A|',('\u1F8B','')),
    ('*/)A|',('\u1F8C','')),
    ('*=)A|',('\u1F8E','')),
    ('*\\)A|',('\u1F8A','')),
    ('*/(E',('\u1F1D','')),
    ('*\\(E',('\u1F1B','')),
    ('*/)E',('\u1F1C','')),
    ('*\\)E',('\u1F1A','')),
    ('*/(H',('\u1F2D','')),
    ('*=(H',('\u1F2F','')),
    ('*\\(H',('\u1F2B','')),
    ('*/)H',('\u1F2C','')),
    ('*=)H',('\u1F2E','')),
    ('*\\)H',('\u1F2A','')),
    ('*/(H|',('\u1F9D','')),
    ('*=(H|',('\u1F9F','')),
    ('*\\(H|',('\u1F9B','')),
    ('*/)H|',('\u1F9C','')),
    ('*=)H|',('\u1F9E','')),
    ('*\\)H|',('\u1F9A','')),
    ('*/(I',('\u1F3D','')),
    ('*=(I',('\u1F3F','')),
    ('*\\(I',('\u1F3B','')),
    ('*/)I',('\u1F3C','')),
    ('*=)I',('\u1F3E','')),
    ('*\\)I',('\u1F3A','')),
    ('*/(O',('\u1F4D','')),
    ('*\\(O',('\u1F4B','')),
    ('*/)O',('\u1F4C','')),
    ('*\\)O',('\u1F4A','')),
    ('*/(U',('\u1F5D','')),
    ('*=(U',('\u1F5F','')),
    ('*\\(U',('\u1F5B','')),
    ('*/(W',('\u1F6D','')),
    ('*=(W',('\u1F6F','')),
    ('*\\(W',('\u1F6B','')),
    ('*/)W',('\u1F6C','')),
    ('*=)W',('\u1F6E','')),
    ('*\\)W',('\u1F6A','')),
    ('*/(W|',('\u1FAD','')),
    ('*=(W|',('\u1FAF','')),
    ('*\\(W|',('\u1FAB','')),
    ('*/)W|',('\u1FAC','')),
    ('*=)W|',('\u1FAE','')),
    ('*\\)W|',('\u1FAA','')),
    ('A/(',('\u1F05','')),
    ('A=(',('\u1F07','')),
    ('A\\(',('\u1F03','')),
    ('A/)',('\u1F04','')),
    ('A=)',('\u1F06','')),
    ('A\\)',('\u1F02','')),
    ('A/(|',('\u1F85','')),
    ('A=(|',('\u1F87','')),
    ('A\\(|',('\u1F83','')),
    ('A/)|',('\u1F84','')),
    ('A=)|',('\u1F86','')),
    ('A\\)|',('\u1F82','')),
    ('E/(',('\u1F15','')),
    ('E\\(',('\u1F13','')),
    ('E/)',('\u1F14','')),
    ('E\\)',('\u1F12','')),
    ('H/(',('\u1F25','')),
    ('H=(',('\u1F27','')),
    ('H\\(',('\u1F23','')),
    ('H/)',('\u1F24','')),
    ('H=)',('\u1F26','')),
    ('H\\)',('\u1F22','')),
    ('H/(|',('\u1F95','')),
    ('H=(|',('\u1F97','')),
    ('H\\(|',('\u1F93','')),
    ('H/)|',('\u1F94','')),
    ('H=)|',('\u1F96','')),
    ('H\\)|',('\u1F92','')),
    ('I/(',('\u1F35','')),
    ('I=(',('\u1F37','')),
    ('I\\(',('\u1F33','')),
    ('I/)',('\u1F34','')),
    ('I=)',('\u1F36','')),
    ('I\\)',('\u1F32','')),
    ('I/+',('\u1FD3','')),
    ('I=+',('\u1FD7','')),
    ('I\\+',('\u1FD2','')),
    ('O/(',('\u1F45','')),
    ('O\\(',('\u1F43','')),
    ('O/)',('\u1F44','')),
    ('O\\)',('\u1F42','')),
    ('O/+',('\u1FE3','')),
    ('O=+',('\u1FE7','')),
    ('O\\+',('\u1FE2','')),
    ('U/(',('\u1F55','')),
    ('U=(',('\u1F57','')),
    ('U\\(',('\u1F53','')),
    ('U/)',('\u1F54','')),
    ('U=)',('\u1F56','')),
    ('U\\)',('\u1F52','')),
    ('W/(',('\u1F65','')),
    ('W=(',('\u1F67','')),
    ('W\\(',('\u1F63','')),
    ('W/)',('\u1F64','')),
    ('W=)',('\u1F66','')),
    ('W\\)',('\u1F62','')),
    ('W/(|',('\u1FA5','')),
    ('W=(|',('\u1FA7','')),
    ('W\\(|',('\u1FA3','')),
    ('W/)|',('\u1FA4','')),
    ('W=)|',('\u1FA6','')),
    ('W\\)|',('\u1FA2','')),
    (",",("\u002C",'')),
    (".",("\u002E",'')),
    (":",("\u00B7",'')),
    (";",("\u00B7",'')),
    ("'",("\u2019",'')),
    ("-",("\u2010",'')),
    ("_",("\u2014",'')),
    ("[",("\u005B",'')),
    ("]",("\u005D",'')),
    (" ",(" ",'')),
    ("S,",("\u03C2\u002C",'')),
    ("S.",("\u03C2\u002E",'')),
    ("S:",("\u03C2\u00B7",'')),
    ("S;",("\u03C2\u00B7",'')),
    ("S]",("\u03C2\u005D",'')),
    ("S_",("\u03C2\u2014",'')),
    ("S\n",("\u03C2",'')),
    ("S ",("\u03C2\u0020",'')) )

    def test_default_values(self):
        for beta, uni in self.pairs:
            result = self.convertor.convert(beta)
            self.assertEqual(uni, result)

    # Homeric Hymn to Dionysus - Betacode taken from the Perseus 
    def test_lines(self):
        hhtdiobeta = """
        oi(\ me\\n ga\\r *draka/nw| s', oi(\ d' *)ika/rw| h)nemoe/ssh|
        fa/s', oi(\ d' e)n *na/cw|, di=on ge/nos, ei)rafiw=ta,
        oi(\ de/ s' e)p' *)alfeiw=| potamw=| baqudinh/enti
        kusame/nhn *seme/lhn teke/ein *dii\ terpikerau/nw|:
        a)/lloi d' e)n *qh/bh|sin, a)/nac, se le/gousi gene/sqai,
        yeudo/menoi: se\ d' e)/tikte path\\r a)ndrw=n te qew=n te
        pollo\\n a)p' a)nqrw/pwn, kru/ptwn leukw/lenon *(/hrhn.
        e)/sti de/ tis *nu/sh, u(/paton o)/ros, a)nqe/on u(/lh|,
        thlou= *foini/khs, sxedo\\n *ai)gu/ptoio r(oa/wn,
        kai/ oi( a)nasth/sousin a)ga/lmata po/ll' e)ni\ nhoi=s.
        w(\s de\ ta\ me\\n tri/a, soi\ pa/ntws triethri/sin ai)ei\\
        a)/nqrwpoi r(e/cousi telhe/ssas e(kato/mbas.

        h)= kai\ kuane/h|sin e)p' o)fru/si neu=se *kroni/wn:
        a)mbro/siai d' a)/ra xai=tai e)perrw/santo a)/naktos 
        krato\s a)p' a)qana/toio: me/gan d' e)le/licen *)/olumpon.
        w(\s ei)pw\\n e)pe/neuse karh/ati mhti/eta *zeu/s.

        i(/lhq', ei)rafiw=ta, gunaimane/s: oi( de/ s' a)oidoi\\
        a)/|domen a)rxo/menoi lh/gonte/s t': ou)de/ ph| e)/sti
        sei=' e)pilhqome/nw| i(erh=s memnh=sqai a)oidh=s.
        kai\ su\\ me\\n ou(/tw xai=re, *diw/nus' ei)rafiw=ta,
        su\\n mhtri\\ *seme/lh|, h(/n per kale/ousi *quw/nhn.
        """



        hhtdiouni = """
        οἳ μὲν γὰρ Δρακάνῳ σ’, οἳ δ’ Ἰκάρῳ ἠνεμοέσσῃ
        φάσ’, οἳ δ’ ἐν Νάξῳ, δῖον γένος, εἰραφιῶτα,
        οἳ δέ σ’ ἐπ’ Ἀλφειῷ ποταμῷ βαθυδινήεντι
        κυσαμένην Σεμέλην τεκέειν Διὶ τερπικεραύνῳ·
        ἄλλοι δ’ ἐν Θήβῃσιν, ἄναξ, σε λέγουσι γενέσθαι,
        ψευδόμενοι· σὲ δ’ ἔτικτε πατὴρ ἀνδρῶν τε θεῶν τε
        πολλὸν ἀπ’ ἀνθρώπων, κρύπτων λευκώλενον Ἥρην.
        ἔστι δέ τις Νύση, ὕπατον ὄρος, ἀνθέον ὕλῃ,
        τηλοῦ Φοινίκης, σχεδὸν Αἰγύπτοιο ῥοάων,
        καί οἱ ἀναστήσουσιν ἀγάλματα πόλλ’ ἐνὶ νηοῖς.
        ὣς δὲ τὰ μὲν τρία, σοὶ πάντως τριετηρίσιν αἰεὶ
        ἄνθρωποι ῥέξουσι τεληέσσας ἑκατόμβας.

        ἦ καὶ κυανέῃσιν ἐπ’ ὀφρύσι νεῦσε Κρονίων·
        ἀμβρόσιαι δ’ ἄρα χαῖται ἐπερρώσαντο ἄνακτος 
        κρατὸς ἀπ’ ἀθανάτοιο· μέγαν δ’ ἐλέλιξεν Ὄλυμπον.
        ὣς εἰπὼν ἐπένευσε καρήατι μητίετα Ζεύς.

        ἵληθ’, εἰραφιῶτα, γυναιμανές· οἱ δέ σ’ ἀοιδοὶ
        ᾄδομεν ἀρχόμενοι λήγοντές τ’· οὐδέ πῃ ἔστι
        σεῖ’ ἐπιληθομένῳ ἱερῆς μεμνῆσθαι ἀοιδῆς.
        καὶ σὺ μὲν οὕτω χαῖρε, Διώνυσ’ εἰραφιῶτα,
        σὺν μητρὶ Σεμέλῃ, ἥν περ καλέουσι Θυώνην.
        """

        for line, uni in zip(hhtdiobeta.splitlines(), hhtdiouni.splitlines()):
            result = self.convertor.convert(line)
            self.assertEqual(uni, result[0])



if __name__ == '__main__':
    unittest.main()







